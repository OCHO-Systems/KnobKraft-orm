Completely unprioritised list of things to do
=============================================

OB-6
+ Implement parameter set of OB-6 for patch diff

RefaceDX
* Patch renaming
* Parameter set missing

Virus
* Patch renaming has to be implemented
* Parameter set missing

Rev2
* Sanitize tuning name before putting it into the database column (otherwise displays as "BLOB")
* Support custom layering by allowing to combine layers to new patches, and by promoting B layers to A layers
* Noteoff on send patch (or send mute patch first? Then I could also just ramp down program volume?)

K3
* Need to display the patch type in the current patch display
* Wave form support (Second DataFile type)
* Could render wave as Thumbnail
* Allow dependencies between DataFiles (patch -> wave for K3)
* Dependency between patch and wave form
* Drawbar Organ Waveform Generator
* Generic Oscillator shape optimizer? 

MKS80
* how to deal with tones and patches

Archiving
+ Durability - also write all patches on the disk as individual patch files ready to send back to synth
* Make regular backups of Database

Generic Module
+ Provide "orm" python package with denibble, DSI packing etc.
+ Would need different "flavours" aka EditBufferCapability, ProgramDumpCabability, BankDumpCapability (Virus), StreamLoadCapability (RefaceDX), StreamDumpCapability (BCR2000), DataFileLoadCapability, HandshakeLoadingCapability (MKS80)
+ Could create FlowChart to select which methods to implement!
+ Could watch files and hot reload module when changed on disk (for easier development)
+ Could add python editor with hot reload function

Macro page
* Select which MIDI input/Synth to use
* Display size of master keyboard (or select lower and upper key)
* Turn macros on/off on a global level (and show it on a global level)
* Also allow sequences, not just chords
* Masterkeyboard support (manualy setup lowest key, highest key), as well as 

Librarian
* Make page number clickable to switch to that page
* Allow multi-select of banks to import (with all feature)
* Allow recursive directory traversal during import
* Could accept synth-initiated dumps at any time
* Better display of bulk imports with real file source
* UI - could hide / fold "advanced search"

Global settings 
* Need to change MIDI channel internally when using the settings editor to change it
* Could show nice text instead of empty page

Future work
* Follow program change on synth so we know which patch is playing. This seems to be quite hard on the Rev2, as it does not send program change when set to NRPN transmit.
  * Record notes played (duration) a specific patch
  * Allow to sort by playing time
* Better Macro Button support. But how to get feedback? Play a sound/chord?
* Allow for free list of tags? This requires storing the tags properly in the database, I think, and allowing to delete no longer used tags.
* I could display which categories were set by the user, and which ones were autodetected
* Better patch name display - the Rev2 patch names are too long. Make it two rows anyway (with two layers?)
* Could have patch name autogenerator like LaserMammoth
* Could have voice input for naming patches? General voice control?
* editor for the synth using the JUCE property editor/Dials. Could do custom layouts for editors (non-skeuomorphic)
* Synth_v2 class/interface more following the generic adaption design than the original Synth class

Database schema
* Should have foreign key constraint imports.id == patches.sourceID
* Should have unique constraing imports.id (should edit buffer import contain synth name? could be scrambled by MD5?)
* Should have non-null everywhere
* Should think about naming convention
* Should create indexes where needed 

MIDI setup
* Echo test - send a sysex, and see if this comes back (e.g. K3 or MKS80 repeating them). If yes, down prioritize those echos
* MIDI log needs a "save log function"
* With more synths, should split "select synth" and "configure synth" into two columns
* Debounce is currently disabled - can I reenable it?

UI Cleanup
* Could add "patch diff" button to top row, always already reading "Compare with ..name of previous patch.."
* Could move LambdaButtonStrip to the very top (like a toolbar?)
* Synth selector goes below main tabs, as the MIDI log is global to all synths, and some future functions will be as well (Clock routing, master keyboard setup)

Big things
	* Adding PyTschirp - for matters like Rev2 Sequencer Features, but also patch randomization, genetic algorithms. Could expose database queries to PyTschirp
	  * Could do targeted randomize - take only the search result as the base set, determine histograms/probability functions for each parameter
	  * Could use this for additional "filter by property" feature. E.g. show only patches with a particular synth feature
	* Adding full BCR2000 support
	* The automatic patch clusterer!
	* Multiple synths in one grid
	* Masterkeyboard control ("Follow the patch")
	* MIDI routing (first only to and forth, then remapping channels, ...)
	* Interface into LaserMammoth devices? Can I execute Javascript?
	* Integrate with CTRLR? Can I host their panels? If yes, for what?
	* Can I synchronize multiple devices via the LaserMammoth Backend?
	* Should I use Amazon DynamoDB to synchronize multiple installations? Encryption?

Alternate Tunings
* https://forum.sequential.com/index.php/topic,3468.0.html
* have you managed to change the slot number

More synthesizers

	+ Behringer RD 8
	+ Novation Circuit

Requested on Reddit

	* Yamaha TX802
	* Yamaha AN1X

Librarian for other stuff (should rather do with adaption?)

	+ BCR2000
	+ Meris pedal

